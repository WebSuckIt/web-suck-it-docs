"use strict";(self.webpackChunkwebsuckit_docs=self.webpackChunkwebsuckit_docs||[]).push([[4545],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),k=l,m=u["".concat(o,".").concat(k)]||u[k]||h[k]||r;return t?a.createElement(m,i(i({ref:n},s),{},{components:t})):a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=k;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c[u]="string"==typeof e?e:l,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},9190:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_position:3},i="PHP Quick Start",c={unversionedId:"SDK quick start copy/php-quick-start",id:"SDK quick start copy/php-quick-start",title:"PHP Quick Start",description:"Use this guide to quickly integrate WebSuckIt into your PHP application.",source:"@site/docs/SDK quick start copy/php-quick-start.md",sourceDirName:"SDK quick start copy",slug:"/SDK quick start copy/php-quick-start",permalink:"/SDK quick start copy/php-quick-start",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Python Quick Start",permalink:"/SDK quick start copy/python-quick-start"},next:{title:"SDK example quick start",permalink:"/category/sdk-example-quick-start"}},o={},p=[{value:"Integrate the WebSuckIt SDK to your PHP application",id:"integrate-the-websuckit-sdk-to-your-php-application",level:2},{value:"Install via Packagist",id:"install-via-packagist",level:3},{value:"Initialization",id:"initialization",level:3},{value:"Channel",id:"channel",level:2},{value:"Accessing a channel&#39;s websocket URL",id:"accessing-a-channels-websocket-url",level:3},{value:"Create a channel",id:"create-a-channel",level:3},{value:"Get a channel",id:"get-a-channel",level:3},{value:"Get channels",id:"get-channels",level:3},{value:"Get or create a channel",id:"get-or-create-a-channel",level:3},{value:"Update a channel",id:"update-a-channel",level:3},{value:"Delete a channel",id:"delete-a-channel",level:3}],s={toc:p},u="wrapper";function h(e){let{components:n,...t}=e;return(0,l.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"php-quick-start"},"PHP Quick Start"),(0,l.kt)("p",null,"Use this guide to quickly integrate WebSuckIt into your PHP application."),(0,l.kt)("h2",{id:"integrate-the-websuckit-sdk-to-your-php-application"},"Integrate the WebSuckIt SDK to your PHP application"),(0,l.kt)("h3",{id:"install-via-packagist"},"Install via Packagist"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"composer require websuckit/websuckit-php\n")),(0,l.kt)("h3",{id:"initialization"},"Initialization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"use Websuckit\\WebsuckitPhp\\Config;\nuse Websuckit\\WebsuckitPhp\\Websuckit;\n\n$config = new Config($_ENV['USER_ID'], $_ENV['ACCESS_KEY'], $_ENV['PUBLIC_KEY']);\n$ws = new Websuckit($config);\n")),(0,l.kt)("p",null,"You can obtain your ",(0,l.kt)("inlineCode",{parentName:"p"},"USER_ID"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ACCESS_KEY"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"PUBLIC_KEY")," from the ",(0,l.kt)("a",{parentName:"p",href:"https://websuckit.com/api-keys"},"WebSuckIt dashboard"),". For guidance on how to do this, please refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://websuckit.com/docs/quick-start"},(0,l.kt)("strong",{parentName:"a"},"quick start guide")),"."),(0,l.kt)("h2",{id:"channel"},"Channel"),(0,l.kt)("h3",{id:"accessing-a-channels-websocket-url"},"Accessing a channel's websocket URL"),(0,l.kt)("p",null,"To obtain a channel's websocket URL, use can the ",(0,l.kt)("inlineCode",{parentName:"p"},"getConnectionUrl")," method. It accepts 3 arguments:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelName"),": The name of the channel you want to connect to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelPassKey"),": The passkey of the channel you want to connect to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"replaySelf")," (optional): A boolean value that, if set to true, regenerates the channel passkey. If set to false, the passkey remains unchanged.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse \\Websuckit\\WebsuckitPhp\\Types\\ChannelConnectionUrlConfig;\n\n$channel = new ChannelConnectionUrlConfig('channel-name', 'channel-pass-key', true);\n$websuckit->getConnectionUrl($channel);\n")),(0,l.kt)("h3",{id:"create-a-channel"},"Create a channel"),(0,l.kt)("p",null,"To create a channel, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"createChannel")," method. It returns an array with the channel details. It accepts 2 arguments:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelName"),": The name of the channel you want to connect to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$max_connections")," (optinal): Maximum number of concurrent connections allowed for the channel.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\n$channelResponse = $ws->createChannel("channel-name", 10);\n')),(0,l.kt)("h3",{id:"get-a-channel"},"Get a channel"),(0,l.kt)("p",null,"Use the getChannel method to retrieve details of an existing channel."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelName"),": The name of the channel.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\n$channelResponse = $ws->getChannel("channel-name");\n')),(0,l.kt)("h3",{id:"get-channels"},"Get channels"),(0,l.kt)("p",null,"Use the getChannels method to retrieve a list of all your channels."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"page"),": Page number (0-indexed)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"per_page"),": Number of channels per page."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"search_key")," (optional): Filter channels by name.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$channelsResponse = $ws->getChannels(1, 5, 'channel-name');\n")),(0,l.kt)("h3",{id:"get-or-create-a-channel"},"Get or create a channel"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"getOrCreateChannel")," method to get an existing channel or create a new one."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\n$channelResponse = $ws->getOrCreateChannel("channel-name");\n')),(0,l.kt)("h3",{id:"update-a-channel"},"Update a channel"),(0,l.kt)("p",null,"To update a channel, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"updateChannel")," method. It returns an array with the updated channel details."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelId"),": The unique identifier (UUID) of the channel."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$channelName"),": The new name for the channel."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$regeneratePassKey"),": Boolean indicating whether to regenerate the channel passkey."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$max_connections")," (optional): Maximum number of connections allowed for the channel.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\n// Update an existing channel\n$channelResponse = $ws->updateChannel("channel-id", "new-channel-name", true, 10);\n')),(0,l.kt)("h3",{id:"delete-a-channel"},"Delete a channel"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"deleteChannel")," method to delete an existing channel."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"channelId"),": The unique identifier (UUID) of the channel.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},'  $channelResponse = $ws->deleteChannel("channel-id");\n')))}h.isMDXComponent=!0}}]);