"use strict";(self.webpackChunkwebsuckit_docs=self.webpackChunkwebsuckit_docs||[]).push([[477],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,k=u["".concat(o,".").concat(m)]||u[m]||h[m]||l;return t?a.createElement(k,c(c({ref:n},p),{},{components:t})):a.createElement(k,c({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,c=new Array(l);c[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[u]="string"==typeof e?e:r,c[1]=i;for(var s=2;s<l;s++)c[s]=t[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:2},c="Python Quick Start",i={unversionedId:"SDK quick start/python-quick-start",id:"SDK quick start/python-quick-start",title:"Python Quick Start",description:"Integrate WebSuckIt into your Python application",source:"@site/docs/SDK quick start/python-quick-start.md",sourceDirName:"SDK quick start",slug:"/SDK quick start/python-quick-start",permalink:"/SDK quick start/python-quick-start",draft:!1,editUrl:"https://github.com/WebSuckIt/web-suck-it-docs/edit/main/docs/SDK quick start/python-quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"JavaScript Quick Start",permalink:"/SDK quick start/javascript-quick-start"},next:{title:"PHP Quick Start",permalink:"/SDK quick start/php-quick-start"}},o={},s=[{value:"Integrate WebSuckIt into your Python application",id:"integrate-websuckit-into-your-python-application",level:2},{value:"Install via Poetry/Pip",id:"install-via-poetrypip",level:3},{value:"Initialization",id:"initialization",level:2},{value:"Channel",id:"channel",level:2},{value:"Accessing a channel&#39;s websocket URL",id:"accessing-a-channels-websocket-url",level:2},{value:"Create channel",id:"create-channel",level:3},{value:"Get channel",id:"get-channel",level:3},{value:"Get channels (paginated)",id:"get-channels-paginated",level:3},{value:"Get or Create channel",id:"get-or-create-channel",level:3},{value:"Update channel",id:"update-channel",level:3},{value:"Delete channel",id:"delete-channel",level:3}],p={toc:s},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-quick-start"},"Python Quick Start"),(0,r.kt)("h2",{id:"integrate-websuckit-into-your-python-application"},"Integrate WebSuckIt into your Python application"),(0,r.kt)("h3",{id:"install-via-poetrypip"},"Install via Poetry/Pip"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install web-suck-it-py\n# or\npoetry add web-suck-it-py\n")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from web_suck_it_py import WebSuckIt\nfrom os import getenv\nhandler = WebSuckIt(\nuser_id=UUID(getenv("USER_ID")),\naccess_key=getenv("ACCESS_KEY"),\npublic_key=getenv("PUBLIC_KEY"),\n)\n')),(0,r.kt)("p",null,"You can get your ",(0,r.kt)("inlineCode",{parentName:"p"},"USER_ID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ACCESS_KEY")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBLIC_KEY")," from the ",(0,r.kt)("a",{parentName:"p",href:"https://websuckit.com/api-keys"},"websuckit dashboard"),"."),(0,r.kt)("h2",{id:"channel"},"Channel"),(0,r.kt)("h2",{id:"accessing-a-channels-websocket-url"},"Accessing a channel's websocket URL"),(0,r.kt)("p",null,"It is possible to access a channel websocket URL by channel name, through the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_connection_url")," function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from web_suck_it_py import GetChannelRequest\nconnection_url = handler.get_connection_url(\n    channel_name="CHANNEL-NAME",\n    channel_pass_key="CHANNEL-PASS-KEY",\n    replay_self=False,\n)\n\n# Import websocket client library of choice\nfrom websockets.sync.client import connect\nwith connect(url) as websocket:\n    message = "Hello World From Py"\n    websocket.send(message)\n')),(0,r.kt)("h3",{id:"create-channel"},"Create channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from web_suck_it_py import CreateChannelRequest\nfrom web_suck_it_py import Channel\nchannel: Channel = handler.create_channel(\n    CreateChannelRequest(\n        channel="new-channel-name",\n        max_connections=2,\n    )\n)\n')),(0,r.kt)("h3",{id:"get-channel"},"Get channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from web_suck_it_py import GetChannelRequest\nfrom web_suck_it_py import Channel\nchannel: Channel = handler.get_channel(\n    GetChannelRequest(\n        channel_name = "CHANNEL-NAME",\n    )\n)\n')),(0,r.kt)("h3",{id:"get-channels-paginated"},"Get channels (paginated)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from typing import List\nfrom web_suck_it_py import GetChannelListRequest\nfrom web_suck_it_py import Channel\nchannels: List[Channel] = handler.get_channels(\n    GetChannelListRequest(\n        page=0,\n        per_page=10,\n        search_key="search-channel",\n    )\n)\n')),(0,r.kt)("h3",{id:"get-or-create-channel"},"Get or Create channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from web_suck_it_py import GetOrCreateChannelRequest\nfrom web_suck_it_py import Channel\nchannel: Channel = handler.get_or_create_channel(\n    GetOrCreateChannelRequest(\n        channel_name = "CHANNEL-NAME",\n    )\n)\n')),(0,r.kt)("h3",{id:"update-channel"},"Update channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from uuid import UUID\nfrom web_suck_it_py import UpdateChannelRequest\nfrom web_suck_it_py import Channel\nchannel: Channel = handler.update_channel(\n    UpdateChannelRequest(\n        # set to channel id\n        channel_id=UUID(""),\n        regenerate_pass_key=False,\n        # set `channel` to change channel name\n        channel="change-channel-name",\n        # set `max_connections` to change maximum concurrent connections\n        max_connections=5,\n    )\n)\n')),(0,r.kt)("h3",{id:"delete-channel"},"Delete channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from uuid import UUID\nfrom web_suck_it_py import DeleteChannelRequest\nhandler.delete_channel(\n    DeleteChannelRequest(\n        channel_id=UUID(""),\n    )\n)\n')))}h.isMDXComponent=!0}}]);