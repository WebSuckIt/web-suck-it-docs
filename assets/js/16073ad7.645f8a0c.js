"use strict";(self.webpackChunkwebsuckit_docs=self.webpackChunkwebsuckit_docs||[]).push([[146],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>k});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function r(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},d=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},p="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,c=n.parentName,d=r(n,["components","mdxType","originalType","parentName"]),p=l(t),m=o,k=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(k,s(s({ref:e},d),{},{components:t})):a.createElement(k,s({ref:e},d))}));function k(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,s=new Array(i);s[0]=m;var r={};for(var c in e)hasOwnProperty.call(e,c)&&(r[c]=e[c]);r.originalType=n,r[p]="string"==typeof n?n:o,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3766:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1},s="Minimal Shared Todo app in JS",r={unversionedId:"SDK example quick start/shared-todo-app-in-JS",id:"SDK example quick start/shared-todo-app-in-JS",title:"Minimal Shared Todo app in JS",description:"Minimal Shared Todo app with websuckit demo gif",source:"@site/docs/SDK example quick start/shared-todo-app-in-JS.mdx",sourceDirName:"SDK example quick start",slug:"/SDK example quick start/shared-todo-app-in-JS",permalink:"/SDK example quick start/shared-todo-app-in-JS",draft:!1,editUrl:"https://github.com/WebSuckIt/web-suck-it-docs/edit/main/docs/SDK example quick start/shared-todo-app-in-JS.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Collaborative Text editor in JS",permalink:"/SDK example quick start/collaborative-text-editor-in-JS"},next:{title:"System Metrics Monitor in Python",permalink:"/SDK example quick start/system-metrics-reporter-in-PY"}},c={},l=[],d={toc:l},p="wrapper";function u(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"minimal-shared-todo-app-in-js"},"Minimal Shared Todo app in JS"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/silva/image/upload/v1701350650/todo_example_with_websuckit.gif",alt:"Minimal Shared Todo app with websuckit demo gif"})),(0,o.kt)("p",null,"An example todo application which allows managing of TODO items from multiple ends"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/src/script.js"',title:'"/src/script.js"'},'import Websuckit from "@websuckit/js";\n\nconst container = document.querySelector(".container");\nconst taskform = document.getElementById("new_task_form");\nconst tasksList = document.getElementById("tasksList");\n\n// Get PUBLIC_KEY, USER_ID, CHANNEL_PASSKEY, CHANNEL_NAME  from dashboard https://websuckit.com/dashboard\nconst publicKey = "PUBLIC_KEY";\nconst userId = "USER_ID";\n\n// Websuckit initialization\nconst websuckitInit = new Websuckit({\n  userId,\n  publicKey,\n});\n\n// Get websocket  connection url from Websuckit\nconst connectionUrl = websuckitInit.getConnectionUrl({\n  channelName: "CHANNEL_NAME", // Insert a valid channel name\n  channelPassKey: "CHANNEL_PASSKEY",\n}).value;\n\n// Connect to websocket Url\nconst ws = new WebSocket(connectionUrl);\n\nws.addEventListener("close", (event) => {\n  console.log("The connection has been closed successfully.");\n});\n\nws.addEventListener("open", (event) => {\n  console.log("The connection has been opened successfully.");\n  // alert("coonection open");\n});\n\nws.addEventListener("message", (event) => {\n  console.log("Message from server ", event.data);\n  const data = JSON.parse(event.data);\n  if (data.type === TaskTypes.Add) {\n    addNewTask(data);\n  }\n  if (data.type === TaskTypes.Complete) {\n    completeOldTask(data);\n  }\n});\n\ntaskform.addEventListener("submit", function (e) {\n  e.preventDefault();\n  var newtaskInputValue = taskform.elements.new_task_input;\n\n  addTask({\n    id: crypto.randomUUID(),\n    type: TaskTypes.Add,\n    value: newtaskInputValue.value,\n  });\n\n  // Reset input value to empty\n  newtaskInputValue.value = "";\n  container.classList.remove("task_list_empty");\n});\n\n// To  add task in List\nfunction addNewTask(newTask) {\n  const value = newTask.value;\n  const id = newTask.id;\n\n  // Create li element and set its class\n  const newTaskItem = document.createElement("li");\n  newTaskItem.setAttribute("class", "task_item");\n  newTaskItem.setAttribute("id", id);\n\n  // Create checkbox  element and set its type and  class\n  const newCheckBtn = document.createElement("div");\n  newCheckBtn.setAttribute("class", "task_check_btn");\n\n  // Create span  element and set its class and add new task input\n  const newTaskBio = document.createElement("span");\n  newTaskBio.setAttribute("class", "task_bio");\n  // Put value of input in it\n  newTaskBio.innerText = value; // putting value of input in the li\n\n  // append (insert) li tag in Ul\n  tasksList.appendChild(newTaskItem);\n  // append (insert) checkbox in li\n  newTaskItem.appendChild(newCheckBtn);\n\n  // append (insert) newtask in li\n  newTaskItem.appendChild(newTaskBio);\n\n  // Run this function when task is completed or checknox is checked\n  onTaskComplete(newTaskItem);\n}\n\nfunction completeOldTask(oldTask) {\n  const id = oldTask.id;\n  const item = document.getElementById(id);\n  if (item !== null) {\n    item.classList.add("taskCompleted");\n  }\n}\n\n// To  add task in List\nfunction addTask(newTask) {\n  addNewTask(newTask);\n  ws.send(JSON.stringify(newTask));\n}\n\nfunction completeTask(id) {\n  const complete = {\n    id: id,\n    type: TaskTypes.Complete,\n  };\n  completeOldTask(complete);\n  ws.send(JSON.stringify(complete));\n}\n\n// To remove the completed task\nfunction onTaskComplete(btns) {\n  btns.addEventListener("click", function (e) {\n    console.log("testing...", e.target);\n    completeTask(e.target.id);\n  });\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="/src/index.html"',title:'"/src/index.html"'},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>TODO</title>\n\n    <link rel="stylesheet" href="style.css" />\n    <script src="script.js" defer><\/script>\n  </head>\n\n  <body>\n    <div class="container task_list_empty">\n      <header>\n        <span class="heading">My Todo \ud83d\uddd2\ufe0f</span>\n      </header>\n\n      <section class="tasks">\n        <ul id="tasksList"></ul>\n      </section>\n\n      <footer>\n        <form id="new_task_form">\n          <input\n            type="text"\n            name="new_task_input"\n            id="new_task_input"\n            placeholder="Create New Task"\n            value=""\n          />\n          <button id="new_task_input_btn" type="submit">Add</button>\n        </form>\n      </footer>\n    </div>\n  </body>\n</html>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="/src/style.css"',title:'"/src/style.css"'},":root {\n  --primary-color: white;\n  --secondary-color: #1e1e1e;\n  --text-color: black;\n  --task-color: white;\n  --footer-color: #1e1e1e;\n  --filter: none;\n  --theme-transition: 0s;\n}\n\n* {\n  font-family: sans-serif;\n  outline: none;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n}\n\n.container {\n  position: relative;\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 400px;\n  height: 80vh;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-radius: 30px;\n}\n\nheader {\n  display: flex;\n  flex-direction: column;\n}\n\n.heading {\n  font-size: 30px;\n}\n\n.tasks {\n  overflow: auto;\n  height: 800px;\n}\n\n#tasksList {\n  padding: 0px;\n}\n\n.task_item {\n  list-style-type: none;\n  border: 1px var(--secondary-color) solid;\n  padding: 10px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  border-radius: 7px;\n  margin-bottom: 20px;\n  background-color: var(--task-color);\n  color: var(--text-color);\n}\n\n.task_item:hover {\n  transition: 0.5s;\n  border: 1px rgba(148, 148, 148, 0.63) solid;\n  cursor: pointer;\n  background-color: rgba(226, 226, 226, 0.192);\n}\n\n.task_check_btn {\n  width: 10px;\n  height: 10px;\n  margin-right: 16px;\n  padding: 3px;\n  border: 2px var(--secondary-color) solid;\n  /* color: var(--primary-color); */\n  background-position: center;\n  background-size: contain;\n  border-radius: 50%;\n  border: 2px grey solid;\n  cursor: pointer;\n}\n\n.task_bio {\n  font-size: 18px;\n}\n\n.task-completed {\n  transition: 0.5s;\n  transform: scale(90%);\n  text-decoration: line-through;\n  color: rgb(150, 150, 150);\n  opacity: 0;\n}\n\nfooter {\n  width: 100%;\n}\n\nfooter form {\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  gap: 10px;\n}\n\n#new_task_input {\n  width: 80%;\n  font-size: 20px;\n  color: black;\n  padding: 5px 0;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px goldenrod solid;\n}\n\n#new_task_input::placeholder {\n  font-size: 16px;\n}\n\n#new_task_input_btn {\n  width: 20%;\n}\n\n.taskCompleted {\n  visibility: hidden;\n}\n")))}u.isMDXComponent=!0}}]);