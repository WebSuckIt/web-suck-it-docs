openapi: 3.0.3
info:
  title: WebSuckIt - OpenAPI 3.0
  description: >-
    This is the specification for WebSuckIt based on the OpenAPI 3.0
    specification.  You can find out more about the

    platform at [https://websuckit.com](https://websuckit.com).


    Some useful links:

    - [WebSuckIt Platform](https://websuckit.com)

    - [WebSuckIt Repository](https://github.com/websuckit/web-suck-it)
  termsOfService: https://websuckit.com/terms/
  contact:
    email: info@websuckit.com
  version: 1.0.11
externalDocs:
  description: Find out more about WebSuckIt
  url: https://docs.websuckit.com
servers:
  - url: https://backend.websuckit.com/api
tags:
  - name: channels
    description: manage your channels
    externalDocs:
      description: Find out more
      url: https://docs.websuckit.com/category/channels-api-overview
  - name: websocket
    description: Connecting to a websocket channel
paths:
  /channel/create:
    post:
      tags:
        - channels
      summary: Create a channel
      description: create a channel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannel'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '409':
          description: channel already exists with name
      security:
        - x-user-id: []
          x-access-key: []
  /channel/{channel_id}/update:
    put:
      tags:
        - channels
      summary: Update a channel
      description: update a channel
      parameters:
        - name: channel_id
          in: path
          description: ID of the channel
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannel'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          description: conflict in request
      security:
        - x-user-id: []
          x-access-key: []
  /channel/{channel_name}/details:
    get:
      tags:
        - channels
      summary: Get channel request
      description: Get a channel by channel name
      parameters:
        - name: channel_name
          in: path
          description: Name of the channel
          required: true
          schema:
            type: string
            format: slug
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          description: Invalid channel_name supplied
        '404':
          description: Channel not found
      security:
        - x-user-id: []
          x-access-key: []
  /channel/{channel_name}/get-or-create:
    get:
      tags:
        - channels
      summary: Get or create a channel request
      description: Get or create a channel by channel name
      parameters:
        - name: channel_name
          in: path
          description: Name of the channel
          required: true
          schema:
            type: string
            format: slug
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      security:
        - x-user-id: []
          x-access-key: []
  /channel/list:
    get:
      tags:
        - channels
      summary: List user's channels
      description: Paginated list of user channel
      parameters:
        - name: page
          in: query
          description: Zero indexed page of user channels
          required: true
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of channels to retrieve per page
          required: true
          schema:
            type: integer
        - name: search_key
          in: query
          description: Optional search key to search for channel(s) by name
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
      security:
        - x-user-id: []
          x-access-key: []
  /channel/{channel_id}/delete:
    delete:
      tags:
        - channels
      summary: Delete a channel
      description: >-
        One can only delete a channel by channel_id as channel name whilst
        unique could be updated
      parameters:
        - name: channel_id
          in: path
          description: id of channel to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
      security:
        - x-user-id: []
          x-access-key: []
  /{user_id}/{channel}:
    get:
      tags:
        - websocket
      parameters:
        - name: user_id
          in: path
          description: ID of the user, same as x-user-id
          required: true
          schema:
            type: string
            format: uuid
        - name: channel
          in: path
          description: Name of the channel to connect to
          required: true
          schema:
            type: string
            format: slug
        - name: encrypted_token
          in: query
          required: true
          description: >-
            Encrypted_token



            In order to generate this, one must have the [_RSA_ user public
            key](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) and 
            `channel_pass_key`. 

            - Take `user_id`, `channel`, `channel_pass_key` and `replay_self`,
            concatenating all into a query string that looks like
            _user_id={user_id}&channel={channel}&channel_pass_key={channel_pass_key}&replay_self={replay_self}_. 
             - Load the _RSA user public key_ 
             - Encrypt the query string using the _RSA user public key_ and [_OAEPv1.5 padding scheme for RSA with SHA-256_ as the hash function](https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding)
             - UrlSafe Base64 decode the result and that's the `encrypted_token`
          schema:
            type: string
            format: slug
        - name: replay_self
          in: query
          description: Set this to true to echo self sent messages
          schema:
            type: boolean
      summary: Connects to a WebSuckIt channel
      description: Connect to a channel
      servers:
        - url: wss://backend.websuckit.com
          description: Websocket url override
      responses:
        '101':
          description: ws successful upgrade
        '400':
          description: could not authenticate the `encrypted_token`
components:
  responses:
    UnauthorizedError:
      description: x-user-id and x-access-key are missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    CreateChannel:
      type: object
      properties:
        channel:
          type: string
          description: name of channel to be created
          format: slug
        max_connections:
          type: integer
          description: restrict the channel to this number of concurrent connections
          format: int64 | null
      required:
        - channel
    UpdateChannel:
      type: object
      properties:
        regenerate_pass_key:
          type: boolean
          description: Regenerate the pass key of channel
          format: slug
        channel:
          type: string
          description: updated name of channel
          format: slug | null
        max_connections:
          type: integer
          description: restrict the channel to this number of concurrent connections
          format: int64 | null
      required:
        - regenerate_pass_key
    Channel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        pass_key:
          type: string
        max_connections:
          type: integer
          format: int64 | null
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    x-user-id:
      type: apiKey
      name: x-user-id
      in: header
    x-access-key:
      type: apiKey
      name: x-access-key
      in: header
